sour_df %>%
unnest_tokens(word,text) %>%
count(book, word, sort = TRUE)
sour_df
tibble(sour_df)
sour_df
tibble(sour_df, text=text)
tibble(line=sour_df, text=text)
?tibble
as_tibble(sour_df)
sour_tibble <- as_tibble(sour_df)
sour_tibble
sour_tibble <- tibble(sour_df)
sour_tibble
sour_tibble %>%
unnest_tokens(word,text) %>%
count(book, word, sort = TRUE)
library(dplyr)
tibble(sour_df)
tibble(line=sour_df)
sour_df
tibble(line=sour_df)
tibble(line=sour_df,text=text)
sour_tibble
sour_tibble %>%
unnest_tokens(word,text)
sour_df
sour_df
tibble(line=1:11,text=sour_df$txt)
sour_tibble <- tibble(line=1:11,text=sour_df$txt)
sour_tibble
sour_tibble %>%
unnest_tokens(word,text) %>%
count(book, word, sort = TRUE)
sour_tibble %>%
unnest_tokens(word,text)
sour_tibble %>%
unnest_tokens(word,text) %>%
count(word, sort = TRUE)
sour_tibble %>%
unnest_tokens(word,text) %>%
count(word, sort = TRUE) %>%
filter(n>5)
sour_tibble %>%
unnest_tokens(word,text) %>%
count(word, sort = TRUE) %>%
filter(n>10)
manual_stop_words <- c("and", "the","that","to","am","are","so","for","be","it","a","of","in","cause","is","are","get")
sour_tibble %>%
anti_join(manual_stop_words) %>%
unnest_tokens(word,text) %>%
count(word, sort = TRUE) %>%
filter(n>10)
sour_tibble %>%
anti_join(manual_stop_words)
data(stop_words)
sour_tibble %>%
anti_join(stop_words) %>%
unnest_tokens(word,text) %>%
count(word, sort = TRUE) %>%
filter(n>10)
sour_tibble %>%
anti_join(stop_words)
sour_tibble
sour_tibble %>%
unnest_tokens(word,text) %>%
anti_join(stop_words)
sour_tibble %>%
unnest_tokens(word,text) %>%
anti_join(stop_words) %>%
count(word, sort = TRUE) %>%
filter(n>10)
sour_tibble %>%
unnest_tokens(word,text) %>%
anti_join(manual_stop_words) %>%
count(word, sort = TRUE) %>%
filter(n>10)
stop_words
sour_tibble %>%
unnest_tokens(word,text) %>%
anti_join(stop_words) %>%
count(word, sort = TRUE) %>%
filter(n>10)
setwd("~/Desktop/oliviarodrigo")
library(dplyr)
library(tidyverse)
library(tm)
library(tidytext)
sour <- read.csv("olivia_rodrigo_data.csv", stringsAsFactors = FALSE)
sour$Lyrics[1]
gsub("[\n]", "", sour$Lyrics)
sour$Lyrics <- gsub("[\r\n]", " ", sour$Lyrics)
sour$Lyrics <- tolower(sour$Lyrics)
sour$Lyrics <- gsub("i'm", "i am", sour$Lyrics)
sour$Lyrics <- gsub("i'll", "i will", sour$Lyrics)
sour$Lyrics <- gsub("you're", "you are", sour$Lyrics)
sour$Lyrics <- gsub("[,()'?]","",sour$Lyrics)
sour$Lyrics <- gsub("[-]"," ",sour$Lyrics)
sour_df <- tibble(txt = sour$Lyrics)
library(janeaustenr)
tibble(txt = prideprejudice)
sour_df <- tibble(sour_df)
library(janeaustenr)
austen_books() %>%
unnest_tokens(word, text) %>%
count(book, word, sort = TRUE)
sour_tibble <- tibble(line=1:11,text=sour_df$txt)
manual_stop_words <- c("and", "the","that","to","am","are","so","for","be","it","a","of","in","cause","is","are","get")
data(stop_words)
sour_tibble %>%
unnest_tokens(word,text) %>%
anti_join(stop_words) %>%
count(word, sort = TRUE) %>%
filter(n>10)
common_words <- sour_tibble %>%
unnest_tokens(word,text) %>%
anti_join(stop_words) %>%
count(word, sort = TRUE) %>%
filter(n>10)
common_words
common_words$word
common_words <- common_words$word
common_words
sour
sour$Lyrics[1]
sour$Lyrics[1].split(" ")
strsplit(sour$Lyrics[1]," ")
```{r}
sour$Lyrics[1]
str_squish(sour$Lyrics[1])
strsplit(str_squish(sour$Lyrics[1])," ")
unlist(strsplit(str_squish(sour$Lyrics[1])," "))
sapply(unlist(strsplit(str_squish(sour$Lyrics[1])," ")), function(x) sum(str_count(x, "parallel")))
table(unlist(strsplit(str_squish(sour$Lyrics[1])," ")))
table(unlist(strsplit(str_squish(sour$Lyrics[1])," ")))[1]
table(unlist(strsplit(str_squish(sour$Lyrics[1])," ")))=="17"
table(unlist(strsplit(str_squish(sour$Lyrics[1])," ")))==17
table(unlist(strsplit(str_squish(sour$Lyrics[1])," ")))
data.frame(table(unlist(strsplit(str_squish(sour$Lyrics[1])," "))))
data.frame(table(unlist(strsplit(str_squish(sour$Lyrics[1])," "))))[1,]
data.frame(table(unlist(strsplit(str_squish(sour$Lyrics[1])," "))))
data.frame(table(unlist(strsplit(str_squish(sour$Lyrics[1])," ")))$Var1
data.frame(table(unlist(strsplit(str_squish(sour$Lyrics[1])," ")))
data.frame(table(unlist(strsplit(str_squish(sour$Lyrics[1])," "))
data.frame(table(unlist(strsplit(str_squish(sour$Lyrics[1])," "))
data.frame(table(unlist(strsplit(str_squish(sour$Lyrics[1])," ")))
data.frame(table(unlist(strsplit(str_squish(sour$Lyrics[1])," "))))
data.frame(table(unlist(strsplit(str_squish(sour$Lyrics[1])," "))))
sapply(unlist(strsplit(str_squish(sour$Lyrics[1])," ")), function(x) sum(str_count(x, "parallel")))
data.frame(table(unlist(strsplit(str_squish(sour$Lyrics[1])," "))))
common_words
test_df <- data.frame(table(unlist(strsplit(str_squish(sour$Lyrics[1])," "))))
test_df <- data.frame(table(unlist(strsplit(str_squish(sour$Lyrics[1])," "))))
test_df
common_words
common_words[1]
colnames(test_df) <- c("Word","Frequency")
test_df
test_df$Word
test_df$Word == common_words
test_df$Word
as.character(test_df$Word)
test_df$Word <- as.character(test_df$Word)
test_df
common_words[1]
test_df$Word == common_words[1]
test_df
common_words
test_df$Word == common_words[1]
sum(test_df$Word == common_words[1])
sour
sour
common_words
data.frame(matrix(NA, nrow = 11, ncol = 13))
sour_terms <- data.frame(matrix(NA, nrow = 11, ncol = 13))
sour
sour$Title
rownames(sour_terms)
rownames(sour_terms) <- sour$Title
sour_terms
sour$Title
rownames(sour_terms) <- sour$Title
length(sour_terms)
rownames(sour_terms) <- common_words
sour_terms
rownames(sour_terms)[1] <- common_words[1]
sour_terms
sour
sour$Title
sour$Title[1]
colnames(sour_terms)[1] <- sour$Title[1]
rownames(sour_terms)[1] <- common_words[1]
for(i in length(sour_terms)){
rownames(sour_terms)[i] <- common_words[i]
}
rownames(sour_terms)[1] <- common_words[1]
for(i in length(common_words)){
rownames(sour_terms)[i] <- common_words[i]
}
length(common_words)
for(i in length(common_words)){
print(i)
# rownames(sour_terms)[i] <- common_words[i]
}
rownames(sour_terms)[1] <- common_words[1]
for(i in 1:length(common_words)){
print(i)
# rownames(sour_terms)[i] <- common_words[i]
}
rownames(sour_terms)[1] <- common_words[1]
for(i in 1:length(common_words)){
rownames(sour_terms)[i] <- common_words[i]
}
rownames(sour_terms)[1] <- common_words[1]
for(i in 1:length(common_words)){
print(i)
rownames(sour_terms)[i] <- common_words[i]
}
rownames(sour_terms)[1] <- common_words[1]
for(i in 1:(length(common_words)-1)){
print(i)
rownames(sour_terms)[i] <- common_words[i]
}
length(common_words)
for(i in 1:length(common_words)){
print(i)
rownames(sour_terms)[i] <- common_words[i]
}
length(common_words)
rownames(sour_terms)[1] <- common_words[1]
for(i in 1:length(common_words)){
print(i)
# rownames(sour_terms)[i] <- common_words[i]
}
sour_terms[13]
rownames(sour_terms)[13]
[13]
rownames(sour_terms)
sour_terms
common_words
for(i in 1:length(common_words)){
print(i)
colnames(sour_terms)[i] <- common_words[i]
}
sour_terms
sour$Title
for(i in 1:length(sour$Title)){
print(i)
rownames(sour_terms)[i] <- sour$Title[i]
}
rownames(sour_terms)
rownames(sour_terms) <- NA
sour$Title
nrow(sour_terms)
length(sour$Title)
for(j in 1:length(sour$Title)){
print(j))
for(j in 1:length(sour$Title)){
print(j)
rownames(sour_terms)[j] <- sour$Title[j]
}
sour_terms
sour$Title
sour
setwd("~/Desktop/oliviarodrigo")
library(dplyr)
library(tidyverse)
library(tm)
library(tidytext)
sour <- read.csv("olivia_rodrigo_data.csv", stringsAsFactors = FALSE)
sour$Lyrics[1]
gsub("[\n]", "", sour$Lyrics)
sour$Lyrics <- gsub("[\r\n]", " ", sour$Lyrics)
sour$Lyrics <- tolower(sour$Lyrics)
sour$Lyrics <- gsub("i'm", "i am", sour$Lyrics)
sour$Lyrics <- gsub("i'll", "i will", sour$Lyrics)
sour$Lyrics <- gsub("you're", "you are", sour$Lyrics)
sour$Lyrics <- gsub("[,()'?]","",sour$Lyrics)
sour$Lyrics <- gsub("[-]"," ",sour$Lyrics)
sour_df <- tibble(txt = sour$Lyrics)
library(janeaustenr)
tibble(txt = prideprejudice)
sour_df <- tibble(sour_df)
library(janeaustenr)
austen_books() %>%
unnest_tokens(word, text) %>%
count(book, word, sort = TRUE)
sour_tibble <- tibble(line=1:11,text=sour_df$txt)
manual_stop_words <- c("and", "the","that","to","am","are","so","for","be","it","a","of","in","cause","is","are","get")
data(stop_words)
common_words <- sour_tibble %>%
unnest_tokens(word,text) %>%
anti_join(stop_words) %>%
count(word, sort = TRUE) %>%
filter(n>10)
common_words <- common_words$word
sour$Lyrics[1]
str_squish(sour$Lyrics[1])
test_df <- data.frame(table(unlist(strsplit(str_squish(sour$Lyrics[1])," "))))
colnames(test_df) <- c("Word","Frequency")
test_df$Word <- as.character(test_df$Word)
sum(test_df$Word == common_words[1])
common_words
sour$Title
#11x13
sour_terms <- data.frame(matrix(NA, nrow = 11, ncol = 13))
rownames(sour_terms)[1] <- common_words[1]
for(i in 1:length(common_words)){
print(i)
colnames(sour_terms)[i] <- common_words[i]
}
for(j in 1:length(sour$Title)){
print(j)
rownames(sour_terms)[j] <- sour$Title[j]
}
colnames(sour_terms)[1] <- sour$Title[1]
common_words
sour_terms
common_words
for(i in 1:length(common_words)){
print(i)
colnames(sour_terms)[i] <- common_words[i]
}
sour_terms
sour_terms
sour_terms[1,]
test_df$Word
sour_terms
test_df <- data.frame(table(unlist(strsplit(str_squish(sour$Lyrics[1])," "))))
colnames(test_df) <- c("Word","Frequency")
colnames( ) <- c("Word","Frequency")
test_df
test_df$Word <- as.character(test_df$Word)
data.frame(table(unlist(strsplit(str_squish(sour$Lyrics[1])," "))))
sour
test_df <- data.frame(table(unlist(strsplit(str_squish(sour$Lyrics[1])," "))))
colnames(test_df) <- c("Word","Frequency")
test_df
test_df$Word <- as.character(test_df$Word)
for(k in 1:length(common_words)){
common_words[k]
}
common_words
for(l in 1:nrow(sour_terms)){
test_df <- data.frame(table(unlist(strsplit(str_squish(sour$Lyrics[l])," "))))
colnames(test_df) <- c("Word","Frequency")
test_df$Word <- as.character(test_df$Word)
counter <- 0
for(k in 1:length(common_words)){
counter <- sum(test_df$Word == common_words[k])
sour_terms[l, k] <- counter
}
}
sour_terms
test_df <- data.frame(table(unlist(strsplit(str_squish(sour$Lyrics[1])," "))))
colnames(test_df) <- c("Word","Frequency")
test_df
test_df$Word <- as.character(test_df$Word)
common_words[1])
common_words[1]
counter <- sum(test_df$Word == common_words[1])
counter
test_df
test_df$Word == common_words[1]
test_df$Word == common_words[2]
sour$Lyrics[2])
test_df <- data.frame(table(unlist(strsplit(str_squish(sour$Lyrics[2])," "))))
test_df
data.frame
sour_terms
data.frame(table(unlist(strsplit(str_squish(sour$Lyrics[2])," "))))
test_df
test_df <- data.frame(table(unlist(strsplit(str_squish(sour$Lyrics[2])," "))))
colnames(test_df) <- c("Word","Frequency")
test_df
test_df$Word <- as.character(test_df$Word)
test_df
test_df <- data.frame(table(unlist(strsplit(str_squish(sour$Lyrics[3])," "))))
colnames(test_df) <- c("Word","Frequency")
test_df$Word <- as.character(test_df$Word)
test_df
common_words[2]
test_df$Word == common_words[2]
common_words[2]
common_words
test_df
sour_terms
test_df <- data.frame(table(unlist(strsplit(str_squish(sour$Lyrics[9])," "))))
colnames(test_df) <- c("Word","Frequency")
test_df
test_df
test_df$Word == common_words[11]
test_df[test_df$Word == common_words[11],2]
sour_terms
for(l in 1:nrow(sour_terms)){
test_df <- data.frame(table(unlist(strsplit(str_squish(sour$Lyrics[l])," "))))
colnames(test_df) <- c("Word","Frequency")
test_df$Word <- as.character(test_df$Word)
counter <- 0
for(k in 1:length(common_words)){
counter <- test_df[test_df$Word == common_words[k],2]
sour_terms[k, l] <- counter
}
}
for(l in 1:nrow(sour_terms)){
test_df <- data.frame(table(unlist(strsplit(str_squish(sour$Lyrics[l])," "))))
colnames(test_df) <- c("Word","Frequency")
test_df$Word <- as.character(test_df$Word)
counter <- 0
for(k in 1:length(common_words)){
counter <- test_df[test_df$Word == common_words[k],2]
# sour_terms[k, l] <- counter
}
}
for(l in 1:nrow(sour_terms)){
test_df <- data.frame(table(unlist(strsplit(str_squish(sour$Lyrics[l])," "))))
colnames(test_df) <- c("Word","Frequency")
test_df$Word <- as.character(test_df$Word)
counter <- 0
for(k in 1:length(common_words)){
counter <- test_df[test_df$Word == common_words[k],2]
sour_terms[l, k] <- counter
}
}
for(l in 1:nrow(sour_terms)){
test_df <- data.frame(table(unlist(strsplit(str_squish(sour$Lyrics[l])," "))))
colnames(test_df) <- c("Word","Frequency")
test_df$Word <- as.character(test_df$Word)
counter <- 0
for(k in 1:length(common_words)){
counter <- test_df[test_df$Word == common_words[k],2]
print(counter)
#sour_terms[l, k] <- counter
}
}
test_df$Word == common_words[k]
sour$Lyrics[2]
test_df <- data.frame(table(unlist(strsplit(str_squish(sour$Lyrics[9])," "))))
colnames(test_df) <- c("Word","Frequency")
test_df
test_df$Word <- as.character(test_df$Word)
test_df
test_df$Word == common_words[11]
test_df[test_df$Word == common_words[11],]
est_df[test_df$Word == common_words[11],2]
test_df[test_df$Word == common_words[11],2
sour_terms[l, k] <- counter
sour_terms
sour_terms <- data.frame(matrix(NA, nrow = 11, ncol = 13))
for(i in 1:length(common_words)){
print(i)
colnames(sour_terms)[i] <- common_words[i]
}
for(j in 1:length(sour$Title)){
print(j)
rownames(sour_terms)[j] <- sour$Title[j]
}
colnames(sour_terms)[1] <- sour$Title[1]
common_words
sour_terms[1,]
for(l in 1:nrow(sour_terms)){
test_df <- data.frame(table(unlist(strsplit(str_squish(sour$Lyrics[l])," "))))
colnames(test_df) <- c("Word","Frequency")
test_df$Word <- as.character(test_df$Word)
counter <- 0
for(k in 1:length(common_words)){
counter <- test_df[test_df$Word == common_words[k],2]
print(counter)
sour_terms[l, k] <- counter
}
}
for(l in 1:nrow(sour_terms)){
test_df <- data.frame(table(unlist(strsplit(str_squish(sour$Lyrics[l])," "))))
colnames(test_df) <- c("Word","Frequency")
test_df$Word <- as.character(test_df$Word)
counter <- 0
for(k in 1:length(common_words)){
if(sum(test_df$Word == common_words[k]) > 0){
counter <- test_df[test_df$Word == common_words[k],2]
print(counter)
sour_terms[l, k] <- counter
}else{
sour_terms[l, k] <- 0
}
}
}
sour_terms
common_words
sour_terms
sour$Title
common_words
for(i in 1:length(common_words)){
print(i)
colnames(sour_terms)[i] <- common_words[i]
}
for(l in 1:nrow(sour_terms)){
test_df <- data.frame(table(unlist(strsplit(str_squish(sour$Lyrics[l])," "))))
colnames(test_df) <- c("Word","Frequency")
test_df$Word <- as.character(test_df$Word)
counter <- 0
for(k in 1:length(common_words)){
if(sum(test_df$Word == common_words[k]) > 0){
counter <- test_df[test_df$Word == common_words[k],2]
print(counter)
sour_terms[l, k] <- counter
}else{
sour_terms[l, k] <- 0
}
}
}
sour_terms
write.csv(sour_terms, "olivia_rodrigo_word_freq.csv")
