avg_rating
avg_rating <- avg_rating[-1]
avg_rating
avg_rating <- str_remove(avg_rating,"avg rating")
avg_rating
str_trim(avg_rating,side=c("left"))
avg_rating <- str_trim(avg_rating,side=c("left"))
unlist(my_rating)
my_rating <- unlist(my_rating)
my_rating
my_rating <- my_rating[-1]
my_rating
str_remove(my_rating,"Joy's rating")
my_rating <- str_remove(my_rating,"Joy's rating")
my_rating
my_rating
my_rating <- str_trim(my_rating,side=c("left"))
my_rating
my_rating == "really liked it"
my_rating
my_rating
my_rating == "really liked it" <- 4
my_rating[y_rating == "really liked it"] <- 4
my_rating[my_rating == "really liked it"] <- 4
my_rating[my_rating == "it was amazing"] <- 5
my_rating[my_rating == "liked it"] <- 3
my_rating[my_rating == "it was ok"] <- 2
my_rating
as.numeric(my_rating)
my_rating <- as.numeric(my_rating)
date_read
end_read_date
unlist(end_read_date)
end_read_date <- unlist(end_read_date)
end_read_date
start_read_date
start_read_date
start_read_date <- unlist(start_read_date)
start_read_date
start_read_date
start_read_date <- start_read_date[-1]
start_read_date
start_read_date
start_read_date <- str_remove(start_read_date,"date added")
start_read_date
start_read_date
start_read_date <- str_trim(start_read_date,side=c("left"))
start_read_date
end_read_date
data.frame(title,author,avg_rating,my_rating,start_read_date,end_read_date)
goodreads <- data.frame(title,author,avg_rating,my_rating,start_read_date,end_read_date)
write.csv(goodreads,"goodreads.csv")
goodreads
setwd("~/Desktop/oliviarodrigo")
setwd("~/Desktop/oliviarodrigo")
?rjson
install.packages("rjson")
library(rjson)
fromJSON(file="data.json")
fromJSON(file='data.json')
```{r}
setwd("~/Desktop/oliviarodrigo")
fromJSON(file="data.json")
fromJSON(file="~/Desktop/oliviarodrigo/data.json")
fromJSON(file="data.json")
fromJSON("data.json")
?rjson
fromJSON(data.json)
#install.packages("rjson")
library("rjson"")
#install.packages("rjson")
library("rjson")
json_file <- "~/Desktop/oliviarodrigo"
json_data <- fromJSON(paste(readLines(json_file), collapse=""))
json_data <- fromJSON(file="~/Desktop/oliviarodrigo")
fromJSON(file="data.json")
toJSON(fromJSON('[1]', simplify=TRUE))
toJSON(fromJSON('[1]', simplify=TRUE))
sample_json <- '
{
"breakfast" : [ "milk", "fruit loops", "juice" ],
"lunch" : [ "left over sushi" ]
}
'
sample_json
parser <- newJSONParser()
parser$addData( sample_json )
parser
rjson::fromJSON(file="data.json")
library("rjson")
rjson::fromJSON(file="data.json")
json_file <- "~/Desktop/oliviarodrigo"
json_data <- rjson::fromJSON(file="rawdata.json")
fromJSON(file="rawdata.json")
library("rjson")
rjson::fromJSON(file="rawdata.json")
library(jsonlite)
rjson::fromJSON("rawdata.json")
fromJSON("rawdata.json")
fromJSON("rawdata.json")
stream_in(file("rawdata.json"))
stream_in(file("rawdata.json"))
library(jsonlite)
?jsonlite
library("rjson")
fromJSON(file = "E:\\rawdata.json")
?fromJSON
library("RJSONIO")
install.packages("RJSONIO")
library("RJSONIO")
fromJSON(file = "E:\\rawdata.json")
RJSONIO::fromJSON(file = "E:\\rawdata.json")
?read_json
library("jsonlite")
read_json(file = "E:\\rawdata.json")
read_json("rawdata.json")
read_json("test_data.json")
read_json("test_data.json")
read_json("test_data.json")
read_json("test_data.json")
read.csv("olivia_rodrigo_data.csv")
sour <- read.csv("olivia_rodrigo_data.csv", stringsAsFactors = FALSE)
sour
sour
sour$lyrics[1]
sour$lyrics
sour$Lyrics[1]
gsub("[\n]", "", sour$Lyrics[1])
gsub("[\n]", "", sour$Lyrics)
sour <- read.csv("olivia_rodrigo_data.csv", stringsAsFactors = FALSE)
sour$Lyrics[1]
gsub("[\n]", "", sour$Lyrics)
gsub("[\r\n]", " ", sour$Lyrics)
sour$Lyrics
sour$Lyrics <- gsub("[\r\n]", " ", sour$Lyrics)
sour$Lyrics
gsub("I'm", "I am", sour$Lyrics)
sour$Lyrics <- gsub("I'm", "I am", sour$Lyrics)
sour$Lyrics <- gsub("I'll", "I will", sour$Lyrics)
sour$Lyrics <- gsub("You're", "You are", sour$Lyrics)
sour$Lyrics
setwd("~/Desktop/oliviarodrigo")
sour <- read.csv("olivia_rodrigo_data.csv", stringsAsFactors = FALSE)
sour$Lyrics[1]
gsub("[\n]", "", sour$Lyrics)
sour$Lyrics <- gsub("[\r\n]", " ", sour$Lyrics)
sour$Lyrics
tolower(sour$Lyrics)
sour$Lyrics <- tolower(sour$Lyrics)
sour$Lyrics <- gsub("i'm", "i am", sour$Lyrics)
sour$Lyrics <- gsub("i'll", "i will", sour$Lyrics)
sour$Lyrics <- gsub("you're", "you are", sour$Lyrics)
sour
setwd("~/Desktop/oliviarodrigo")
sour <- read.csv("olivia_rodrigo_data.csv", stringsAsFactors = FALSE)
sour$Lyrics[1]
gsub("[\n]", "", sour$Lyrics)
sour$Lyrics <- gsub("[\r\n]", " ", sour$Lyrics)
sour$Lyrics <- tolower(sour$Lyrics)
library(dplyr)
sour$Lyrics[1]
sour$Lyrics[2]
sour$Lyrics[3]
sour
test <- c("'i'm","'a",",and","forver,")
test <- c("'i'm","'a",",and","forver,")
test <- c("'i'm","'a",",and","forver,")
test <- c("'i'm","'a",",and","forver,")
test
---
title: "OliviaRodrigoData"
output: html_document
---
```{r}
setwd("~/Desktop/oliviarodrigo")
```
```{r}
library(dplyr)
```
```{r}
sour <- read.csv("olivia_rodrigo_data.csv", stringsAsFactors = FALSE)
```
replace \n with space, remove punctuations, make everything lower case
```{r}
sour$Lyrics[1]
```
```{r}
gsub("[\n]", "", sour$Lyrics)
```
```{r}
sour$Lyrics <- gsub("[\r\n]", " ", sour$Lyrics)
```
```{r}
sour$Lyrics <- tolower(sour$Lyrics)
```
```{r}
sour$Lyrics <- gsub("i'm", "i am", sour$Lyrics)
sour$Lyrics <- gsub("i'll", "i will", sour$Lyrics)
sour$Lyrics <- gsub("you're", "you are", sour$Lyrics)
```
remove comma in r not between words
```{r}
sour$Lyrics[3]
```
```{r}
test <- c("'i'm","'a",",and","forver,")
test
```
```{r}
gsub(","," ",test)
```
gsub(","," ",test)
sour$Lyrics[3]
test <- c("'i'm","'a",",and","forver,","(ooh)")
test
gsub("[,()]"," ",test)
---
title: "OliviaRodrigoData"
output: html_document
---
```{r}
setwd("~/Desktop/oliviarodrigo")
```
```{r}
library(dplyr)
```
```{r}
sour <- read.csv("olivia_rodrigo_data.csv", stringsAsFactors = FALSE)
```
replace \n with space, remove punctuations, make everything lower case
```{r}
sour$Lyrics[1]
```
```{r}
gsub("[\n]", "", sour$Lyrics)
```
```{r}
sour$Lyrics <- gsub("[\r\n]", " ", sour$Lyrics)
```
```{r}
sour$Lyrics <- tolower(sour$Lyrics)
```
```{r}
sour$Lyrics <- gsub("i'm", "i am", sour$Lyrics)
sour$Lyrics <- gsub("i'll", "i will", sour$Lyrics)
sour$Lyrics <- gsub("you're", "you are", sour$Lyrics)
```
remove comma in r not between words
```{r}
sour$Lyrics[2]
```
```{r}
test <- c("'i'm","'a",",and","forver,","(ooh)")
test
```
```{r}
gsub("[,()]"," ",test)
```
sour$Lyrics[2]
gsub("[,()'?]"," ",test)
gsub("[,()'?]","",test)
test <- c("'i'm","'a",",and","forver,","(ooh)","(ah-ah-ah)")
test
gsub("[,()'?-]","",test)
gsub("[,()'?]","",test)
gsub("[,()'?]","",test)
gsub("[-]"," ",test)
sour$Lyrics
sour$Lyrics <- gsub("[,()'?]","",sour$Lyrics)
sour$Lyrics <- gsub("[-]"," ",sour$Lyrics)
sour
sour
library(dplyr)
library(tidyverse)
library(tidytext)
install.packages('tidytext')
library(tidytext)
install.packages('tidytext')
install.packages("tidytext")
install.packages("tidytext")
install.packages("tidytext")
install.packages("tidytext")
install.packages('tidytext')
install.packages("tidytext")
install.packages("tidytext")
setwd("~/Desktop/oliviarodrigo")
library(dplyr)
library(tidyverse)
library(tidytext)
?tidytext
??tidytext
library(tm)
install.packages("tm")
library(tm)
sour <- read.csv("olivia_rodrigo_data.csv", stringsAsFactors = FALSE)
sour$Lyrics[1]
gsub("[\n]", "", sour$Lyrics)
sour$Lyrics <- gsub("[\r\n]", " ", sour$Lyrics)
sour$Lyrics <- tolower(sour$Lyrics)
sour$Lyrics <- gsub("i'm", "i am", sour$Lyrics)
sour$Lyrics <- gsub("i'll", "i will", sour$Lyrics)
sour$Lyrics <- gsub("you're", "you are", sour$Lyrics)
sour$Lyrics <- gsub("[,()'?]","",sour$Lyrics)
sour$Lyrics <- gsub("[-]"," ",sour$Lyrics)
sour$Lyrics %>% unnest(word, text)
sour_df <- sour$Lyrics %>% unnest(word, text)
sour$Lyrics
data.frame(sour$Lyrics) %>% unnest(word, text)
sour_df <- data.frame(sour$Lyrics)
sour_df
library(tidytext)
sour_df %>%
unnest_tokens(word,text)
?unnest_token
??unnest_token
library(dplyr)
install.packages("tidytext")
install.packages("tidytext")
install.packages("tidytext")
sour_df %>%
unnest_tokens(word,text)
library(dplyr)
library(tidyverse)
library(tm)
library(tidytext)
sour_df %>%
unnest_tokens(word,text)
install.packages("rlang")
update.packages("rlang")
library(rlang)
remove.packages('rlang')
install.packages('rlang')
install.packages("rlang")
library(rlang)
update.packages('dplyr')
library(dplyr)
library(tidyverse)
library(tm)
library(tidytext)
library(dplyr)
?dplyr
library(tidytext)
library(rlang)
remove.packages(rlang)
library('rlang')
remove.packages('rlang')
install.packages('rlang')
install.packages("rlang")
library(rlang)
?rlang
??rlang
setwd("~/Desktop/oliviarodrigo")
library(dplyr)
library(tidyverse)
library(tm)
library(tidytext)
setwd("~/Desktop/oliviarodrigo")
library(dplyr)
library(tidyverse)
library(tm)
library(tidytext)
sour <- read.csv("olivia_rodrigo_data.csv", stringsAsFactors = FALSE)
sour$Lyrics[1]
gsub("[\n]", "", sour$Lyrics)
sour$Lyrics <- gsub("[\r\n]", " ", sour$Lyrics)
sour$Lyrics <- tolower(sour$Lyrics)
sour$Lyrics <- gsub("i'm", "i am", sour$Lyrics)
sour$Lyrics <- gsub("i'll", "i will", sour$Lyrics)
sour$Lyrics <- gsub("you're", "you are", sour$Lyrics)
sour$Lyrics <- gsub("[,()'?]","",sour$Lyrics)
sour$Lyrics <- gsub("[-]"," ",sour$Lyrics)
sour_df <- data.frame(sour$Lyrics)
sour_df %>%
unnest_tokens(word,text)
sour_df <- tibble(txt = sour$Lyrics)
sour_df
sour_df %>%
unnest_tokens(word,text)
library(janeaustenr)
tibble(txt = prideprejudice)
tibble(txt = sour_df)
sour_df
tibble(sour_df)
tibble(txt = prideprejudice)
sour_df <- tibble(sour_df)
sour_df %>%
unnest_tokens(word,text)
sour_df %>%
unnest_tokens(word,text)
setwd("~/Desktop/oliviarodrigo")
library(dplyr)
library(tidyverse)
library(tm)
library(tidytext)
sour <- read.csv("olivia_rodrigo_data.csv", stringsAsFactors = FALSE)
sour$Lyrics[1]
gsub("[\n]", "", sour$Lyrics)
sour$Lyrics <- gsub("[\r\n]", " ", sour$Lyrics)
sour$Lyrics <- tolower(sour$Lyrics)
sour$Lyrics <- gsub("i'm", "i am", sour$Lyrics)
sour$Lyrics <- gsub("i'll", "i will", sour$Lyrics)
sour$Lyrics <- gsub("you're", "you are", sour$Lyrics)
sour$Lyrics <- gsub("[,()'?]","",sour$Lyrics)
sour$Lyrics <- gsub("[-]"," ",sour$Lyrics)
sour_df <- tibble(txt = sour$Lyrics)
library(janeaustenr)
tibble(txt = prideprejudice)
sour_df <- tibble(sour_df)
sour_df %>%
unnest_tokens(word,text)
library(janeaustenr)
library(janeaustenr)
austen_books() %>%
unnest_tokens(word, text) %>%
count(book, word, sort = TRUE)
austen_books
austen_books() %>%
unnest_tokens(word, text) %>%
count(book, word, sort = TRUE)
sour_df
austen_books
sour_df %>%
unnest_tokens(word,text) %>%
count(book, word, sort = TRUE)
twListToDF(sour_df)
sour_factor <- as.factor(sour_df)
sour_factor %>%
unnest_tokens(word,text) %>%
count(book, word, sort = TRUE)
sour_df %>%
unnest_tokens(word,text) %>%
count(book, word, sort = TRUE)
sour_df
tibble(sour_df)
sour_df
tibble(sour_df, text=text)
tibble(line=sour_df, text=text)
?tibble
as_tibble(sour_df)
sour_tibble <- as_tibble(sour_df)
sour_tibble
sour_tibble <- tibble(sour_df)
sour_tibble
sour_tibble %>%
unnest_tokens(word,text) %>%
count(book, word, sort = TRUE)
library(dplyr)
tibble(sour_df)
tibble(line=sour_df)
sour_df
tibble(line=sour_df)
tibble(line=sour_df,text=text)
sour_tibble
sour_tibble %>%
unnest_tokens(word,text)
sour_df
sour_df
tibble(line=1:11,text=sour_df$txt)
sour_tibble <- tibble(line=1:11,text=sour_df$txt)
sour_tibble
sour_tibble %>%
unnest_tokens(word,text) %>%
count(book, word, sort = TRUE)
sour_tibble %>%
unnest_tokens(word,text)
sour_tibble %>%
unnest_tokens(word,text) %>%
count(word, sort = TRUE)
sour_tibble %>%
unnest_tokens(word,text) %>%
count(word, sort = TRUE) %>%
filter(n>5)
sour_tibble %>%
unnest_tokens(word,text) %>%
count(word, sort = TRUE) %>%
filter(n>10)
manual_stop_words <- c("and", "the","that","to","am","are","so","for","be","it","a","of","in","cause","is","are","get")
sour_tibble %>%
anti_join(manual_stop_words) %>%
unnest_tokens(word,text) %>%
count(word, sort = TRUE) %>%
filter(n>10)
sour_tibble %>%
anti_join(manual_stop_words)
data(stop_words)
sour_tibble %>%
anti_join(stop_words) %>%
unnest_tokens(word,text) %>%
count(word, sort = TRUE) %>%
filter(n>10)
sour_tibble %>%
anti_join(stop_words)
sour_tibble
sour_tibble %>%
unnest_tokens(word,text) %>%
anti_join(stop_words)
sour_tibble %>%
unnest_tokens(word,text) %>%
anti_join(stop_words) %>%
count(word, sort = TRUE) %>%
filter(n>10)
sour_tibble %>%
unnest_tokens(word,text) %>%
anti_join(manual_stop_words) %>%
count(word, sort = TRUE) %>%
filter(n>10)
stop_words
sour_tibble %>%
unnest_tokens(word,text) %>%
anti_join(stop_words) %>%
count(word, sort = TRUE) %>%
filter(n>10)
